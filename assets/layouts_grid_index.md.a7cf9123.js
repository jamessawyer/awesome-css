import{_ as e,c as o,o as a,a as s}from"./app.cbd3c845.js";const l="/awesome-css/assets/grid-container.7731c6be.png",t="/awesome-css/assets/grid-children.7070d26f.png",u=JSON.parse('{"title":"Grid布局","description":"","frontmatter":{"title":"Grid布局"},"headers":[{"level":2,"title":"CheatSheet","slug":"cheatsheet","link":"#cheatsheet","children":[]},{"level":2,"title":"教程","slug":"教程","link":"#教程","children":[]},{"level":2,"title":"工具","slug":"工具","link":"#工具","children":[]}],"relativePath":"layouts/grid/index.md","lastUpdated":1676531959000}'),r={name:"layouts/grid/index.md"},c=s('<p>Grid是新的二维布局，flexbox着重强调一维空间，而Grid再强调二维空间的布局。两者相辅相成，一起使用，更加的强大。 Grid属性及其的多，且容易混淆，尤其是各种属性也类似，因此需要经常的查看和使用才便于记忆。</p><h2 id="cheatsheet" tabindex="-1">CheatSheet <a class="header-anchor" href="#cheatsheet" aria-hidden="true">#</a></h2><p><a href="https://grid.malven.co/" target="_blank" rel="noreferrer">Grid CheatSheet</a> 快速查看Grid属性：</p><p><img src="'+l+'" alt="Grid Container"></p><p><img src="'+t+`" alt="Grid Children"></p><h2 id="教程" tabindex="-1">教程 <a class="header-anchor" href="#教程" aria-hidden="true">#</a></h2><ol><li><p><a href="https://learncssgrid.com/" target="_blank" rel="noreferrer">🔥 LearncssGrid.com</a> 很详尽的列举处了所有的Grid属性</p><ul><li>Grid一些属性缩写： <ul><li><code>grid-gap: 100px 1rem;</code>: 等价于 <code>grid-row-gap: 100px;</code> &amp; <code>grid-column-gap: 1rem;</code>。如果只写一个值，则表示row和column gap相同，即 <code>grid-gap: 16px;</code> 等价于 <code>grid-row-gap: 16px;</code> &amp; <code>grid-column-gap: 16px;</code></li><li><code>grid-row: 2;</code> 等价于 <code>grid-row-start: 2;</code> &amp; <code>grid-row-end: 3;</code></li><li><code>grid-row: 1 / 3</code> 等价于 <code>grid-row-start: 1;</code> &amp; <code>grid-row-end: 3;</code></li><li><code>grid-row: 1 / span 3</code> 等于于 <code>grid-row-start: 1;</code> &amp; <code>grid-row-end: 4;</code> 其中 <code>span</code> 表示横跨多少rows</li><li><code>grid-area: 2 / 2 / 3 / 3</code> 依次表示 <code>grid-row-start / grid-column-start / grid-row-end / grid-column-end</code></li></ul></li><li>隐式Grid，当Items项数量超过Grid规定的单元格数时： <ul><li><code>grid-auto-flow</code> 默认为 <code>row</code>，即垂直方向的填充，还可以定义 <code>grid-auto-rows: 140px;</code> 表示下个填充的 <code>rows</code> 的高度。</li><li>可以设置 <code>grid-auot-flow: column;</code> 即水平方向填充，还可以定义 <code>grid-auto-columns: 1fr;</code> 表示填充的宽度为容器剩余宽度的 <code>1fr</code>。</li></ul></li><li><code>justify-content</code>: 表示当整体grid尺寸小于容器尺寸时，<code>水平</code>方向如何防止Items</li><li><code>justify-items</code>: 沿行轴(即 <code>水平</code>)对齐网格项中的内容，注意和上面的 <code>justify-content</code> 的区别🚨</li><li><code>justify-self</code>: 表示单个Item，自身沿水平方向怎么对其<code>grid cell</code></li></ul></li><li><p><a href="https://css-tricks.com/snippets/css/complete-guide-grid/" target="_blank" rel="noreferrer">🚀🚀 A Complete Guide to CSS Grid</a> 这个是对上面教程的补充，更加的完整，其图形表示更加的清晰，必看🔥</p><ul><li><p>包含所有属性的完成语法😎</p></li><li><p><code>place-self</code> 可同时设置 <code>&lt;align-self&gt; / &lt;justify-self&gt;</code> 比如 <code>place-self: center stretch</code> 表示 <code>align-self: center;</code> (即单元格内垂直方向居中) &amp; <code>justify-self: stretch;</code> (即单元格内水平方向拉伸填充)</p></li><li><p><code>place-items</code> 可同时设置 <code>&lt;align-items&gt; / &lt;justify-items&gt;</code> 这2个属性和 <code>flexbox</code> 中的 <code>align-items</code> &amp; <code>justify-content</code> 是一样的。比如 <code>place-items: center;</code> 表示 <code>align-items: center;</code> &amp; <code>justify-content: center;</code></p></li><li><p><code>place-content</code> 可同时设置 <code>&lt;align-content&gt; / &lt;justify-content&gt;</code> 这2个属性，它们都表示当整体大小小于grid容器大小时，整体的摆放方式。比如 <code>place-content: start end;</code> 表示 <code>align-content: start;</code>（垂直方向） &amp; <code>justify-content: end;</code> （水平方向）</p></li><li><p><code>grid-template</code> 可同时设置 <code>&lt;grid-template-rows&gt; / &lt;grid-template-columns&gt;</code>。 比如 <code>grid-template: 40% 60% / 200px 1fr;</code> 等价于 <code>grid-template-rows: 40% 60%;</code> &amp; <code>grid-template-columns: 200px 1fr;</code></p></li><li><p>流式布局代码片段：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">grid-container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/* minmax(200px, 1fr) 表示最小200px，最大 1fr */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">repeat</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">auto-fill</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">minmax</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">200px</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1fr</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/* 对于小屏幕，可以使用下面方式： min(200px, 100%) 表示 200px和 100%去更小的值 */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/* grid-template-columns: repeat(auto-fill, minmax(min(200px, 100%), 1fr)); */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">gap</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1rem</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>包含其余一些关于Grid相关的教程和资源🔥</p></li></ul></li><li><p><a href="https://gridbyexample.com/" target="_blank" rel="noreferrer">🚀🚀 Grid By Example</a> 包含Grid相关大量的示例和视频，以及图解，必看🔥</p></li><li><p><a href="https://cssgridgarden.com/" target="_blank" rel="noreferrer">💯 CSS Grid Garden</a> 通过游戏的方式学习Grid属性</p></li><li><p><a href="https://ishadeed.com/article/figma-css/" target="_blank" rel="noreferrer">The CSS behind Figma - @ishadeed.com</a> 介绍了Figma中如何使用Flexbox &amp; Grid进行布局的</p></li></ol><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-hidden="true">#</a></h2><ol><li><a href="https://yoksel.github.io/grid-cheatsheet/#section-display" target="_blank" rel="noreferrer">Grid Cheatsheet online</a> 通过各种按钮选择，来理解grid属性的用法，包含所有属性语法</li><li><a href="https://cssgrid-generator.netlify.app/" target="_blank" rel="noreferrer">CSS Grid Generator</a> 在线边界Grid格子，然后生成代码</li><li><a href="https://grid.layoutit.com/" target="_blank" rel="noreferrer">Grid.layoutit</a> 这个也是在线生成代码，比上面的功能更强大一些😎</li></ol><p>2022年12月27日15:35:45</p>`,10),n=[c];function i(d,p,g,m,h,f){return a(),o("div",null,n)}const C=e(r,[["render",i]]);export{u as __pageData,C as default};
